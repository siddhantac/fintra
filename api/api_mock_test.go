// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/siddhantac/fintra/domain"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked Service
// 		mockedService := &ServiceMock{
// 			GetTransactionFunc: func(id string) (*domain.Transaction, error) {
// 				panic("mock out the GetTransaction method")
// 			},
// 		}
//
// 		// use mockedService in code that requires Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// GetTransactionFunc mocks the GetTransaction method.
	GetTransactionFunc func(id string) (*domain.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTransaction holds details about calls to the GetTransaction method.
		GetTransaction []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockGetTransaction sync.RWMutex
}

// GetTransaction calls GetTransactionFunc.
func (mock *ServiceMock) GetTransaction(id string) (*domain.Transaction, error) {
	if mock.GetTransactionFunc == nil {
		panic("ServiceMock.GetTransactionFunc: method is nil but Service.GetTransaction was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetTransaction.Lock()
	mock.calls.GetTransaction = append(mock.calls.GetTransaction, callInfo)
	mock.lockGetTransaction.Unlock()
	return mock.GetTransactionFunc(id)
}

// GetTransactionCalls gets all the calls that were made to GetTransaction.
// Check the length with:
//     len(mockedService.GetTransactionCalls())
func (mock *ServiceMock) GetTransactionCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetTransaction.RLock()
	calls = mock.calls.GetTransaction
	mock.lockGetTransaction.RUnlock()
	return calls
}
