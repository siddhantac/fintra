// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"github.com/siddhantac/fintra/model"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetAllFunc: func() ([]*model.Transaction, error) {
// 				panic("mock out the GetAll method")
// 			},
// 			GetByIDFunc: func(s string) (*model.Transaction, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			InsertFunc: func(transaction *model.Transaction) error {
// 				panic("mock out the Insert method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]*model.Transaction, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(s string) (*model.Transaction, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(transaction *model.Transaction) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// S is the s argument value.
			S string
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Transaction is the transaction argument value.
			Transaction *model.Transaction
		}
	}
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
	lockInsert  sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *RepositoryMock) GetAll() ([]*model.Transaction, error) {
	if mock.GetAllFunc == nil {
		panic("RepositoryMock.GetAllFunc: method is nil but Repository.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedRepository.GetAllCalls())
func (mock *RepositoryMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(s string) (*model.Transaction, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(s)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(transaction *model.Transaction) error {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Transaction *model.Transaction
	}{
		Transaction: transaction,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(transaction)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Transaction *model.Transaction
} {
	var calls []struct {
		Transaction *model.Transaction
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}
