// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rest

import (
	"github.com/siddhantac/fintra/domain"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked Service
// 		mockedService := &ServiceMock{
// 			GetAllTransactionsFunc: func() ([]*domain.Transaction, error) {
// 				panic("mock out the GetAllTransactions method")
// 			},
// 			GetTransactionFunc: func(id string) (*domain.Transaction, error) {
// 				panic("mock out the GetTransaction method")
// 			},
// 			NewTransactionFunc: func(amount float64, isDebit bool, date string, category string, transactionType string, description string, account string) (*domain.Transaction, error) {
// 				panic("mock out the NewTransaction method")
// 			},
// 		}
//
// 		// use mockedService in code that requires Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// GetAllTransactionsFunc mocks the GetAllTransactions method.
	GetAllTransactionsFunc func() ([]*domain.Transaction, error)

	// GetTransactionFunc mocks the GetTransaction method.
	GetTransactionFunc func(id string) (*domain.Transaction, error)

	// NewTransactionFunc mocks the NewTransaction method.
	NewTransactionFunc func(amount float64, isDebit bool, date string, category string, transactionType string, description string, account string) (*domain.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllTransactions holds details about calls to the GetAllTransactions method.
		GetAllTransactions []struct {
		}
		// GetTransaction holds details about calls to the GetTransaction method.
		GetTransaction []struct {
			// ID is the id argument value.
			ID string
		}
		// NewTransaction holds details about calls to the NewTransaction method.
		NewTransaction []struct {
			// Amount is the amount argument value.
			Amount float64
			// IsDebit is the isDebit argument value.
			IsDebit bool
			// Date is the date argument value.
			Date string
			// Category is the category argument value.
			Category string
			// TransactionType is the transactionType argument value.
			TransactionType string
			// Description is the description argument value.
			Description string
			// Account is the account argument value.
			Account string
		}
	}
	lockGetAllTransactions sync.RWMutex
	lockGetTransaction     sync.RWMutex
	lockNewTransaction     sync.RWMutex
}

// GetAllTransactions calls GetAllTransactionsFunc.
func (mock *ServiceMock) GetAllTransactions() ([]*domain.Transaction, error) {
	if mock.GetAllTransactionsFunc == nil {
		panic("ServiceMock.GetAllTransactionsFunc: method is nil but Service.GetAllTransactions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllTransactions.Lock()
	mock.calls.GetAllTransactions = append(mock.calls.GetAllTransactions, callInfo)
	mock.lockGetAllTransactions.Unlock()
	return mock.GetAllTransactionsFunc()
}

// GetAllTransactionsCalls gets all the calls that were made to GetAllTransactions.
// Check the length with:
//     len(mockedService.GetAllTransactionsCalls())
func (mock *ServiceMock) GetAllTransactionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllTransactions.RLock()
	calls = mock.calls.GetAllTransactions
	mock.lockGetAllTransactions.RUnlock()
	return calls
}

// GetTransaction calls GetTransactionFunc.
func (mock *ServiceMock) GetTransaction(id string) (*domain.Transaction, error) {
	if mock.GetTransactionFunc == nil {
		panic("ServiceMock.GetTransactionFunc: method is nil but Service.GetTransaction was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetTransaction.Lock()
	mock.calls.GetTransaction = append(mock.calls.GetTransaction, callInfo)
	mock.lockGetTransaction.Unlock()
	return mock.GetTransactionFunc(id)
}

// GetTransactionCalls gets all the calls that were made to GetTransaction.
// Check the length with:
//     len(mockedService.GetTransactionCalls())
func (mock *ServiceMock) GetTransactionCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetTransaction.RLock()
	calls = mock.calls.GetTransaction
	mock.lockGetTransaction.RUnlock()
	return calls
}

// NewTransaction calls NewTransactionFunc.
func (mock *ServiceMock) NewTransaction(amount float64, isDebit bool, date string, category string, transactionType string, description string, account string) (*domain.Transaction, error) {
	if mock.NewTransactionFunc == nil {
		panic("ServiceMock.NewTransactionFunc: method is nil but Service.NewTransaction was just called")
	}
	callInfo := struct {
		Amount          float64
		IsDebit         bool
		Date            string
		Category        string
		TransactionType string
		Description     string
		Account         string
	}{
		Amount:          amount,
		IsDebit:         isDebit,
		Date:            date,
		Category:        category,
		TransactionType: transactionType,
		Description:     description,
		Account:         account,
	}
	mock.lockNewTransaction.Lock()
	mock.calls.NewTransaction = append(mock.calls.NewTransaction, callInfo)
	mock.lockNewTransaction.Unlock()
	return mock.NewTransactionFunc(amount, isDebit, date, category, transactionType, description, account)
}

// NewTransactionCalls gets all the calls that were made to NewTransaction.
// Check the length with:
//     len(mockedService.NewTransactionCalls())
func (mock *ServiceMock) NewTransactionCalls() []struct {
	Amount          float64
	IsDebit         bool
	Date            string
	Category        string
	TransactionType string
	Description     string
	Account         string
} {
	var calls []struct {
		Amount          float64
		IsDebit         bool
		Date            string
		Category        string
		TransactionType string
		Description     string
		Account         string
	}
	mock.lockNewTransaction.RLock()
	calls = mock.calls.NewTransaction
	mock.lockNewTransaction.RUnlock()
	return calls
}
